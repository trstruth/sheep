// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/sheep.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sheep_GetBoolFlag_FullMethodName = "/sheep.Sheep/GetBoolFlag"
	Sheep_CreateFlag_FullMethodName  = "/sheep.Sheep/CreateFlag"
)

// SheepClient is the client API for Sheep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SheepClient interface {
	GetBoolFlag(ctx context.Context, in *GetBoolFlagRequest, opts ...grpc.CallOption) (*GetBoolFlagResponse, error)
	CreateFlag(ctx context.Context, in *CreateFlagRequest, opts ...grpc.CallOption) (*CreateFlagResponse, error)
}

type sheepClient struct {
	cc grpc.ClientConnInterface
}

func NewSheepClient(cc grpc.ClientConnInterface) SheepClient {
	return &sheepClient{cc}
}

func (c *sheepClient) GetBoolFlag(ctx context.Context, in *GetBoolFlagRequest, opts ...grpc.CallOption) (*GetBoolFlagResponse, error) {
	out := new(GetBoolFlagResponse)
	err := c.cc.Invoke(ctx, Sheep_GetBoolFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheepClient) CreateFlag(ctx context.Context, in *CreateFlagRequest, opts ...grpc.CallOption) (*CreateFlagResponse, error) {
	out := new(CreateFlagResponse)
	err := c.cc.Invoke(ctx, Sheep_CreateFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SheepServer is the server API for Sheep service.
// All implementations must embed UnimplementedSheepServer
// for forward compatibility
type SheepServer interface {
	GetBoolFlag(context.Context, *GetBoolFlagRequest) (*GetBoolFlagResponse, error)
	CreateFlag(context.Context, *CreateFlagRequest) (*CreateFlagResponse, error)
	mustEmbedUnimplementedSheepServer()
}

// UnimplementedSheepServer must be embedded to have forward compatible implementations.
type UnimplementedSheepServer struct {
}

func (UnimplementedSheepServer) GetBoolFlag(context.Context, *GetBoolFlagRequest) (*GetBoolFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoolFlag not implemented")
}
func (UnimplementedSheepServer) CreateFlag(context.Context, *CreateFlagRequest) (*CreateFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlag not implemented")
}
func (UnimplementedSheepServer) mustEmbedUnimplementedSheepServer() {}

// UnsafeSheepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SheepServer will
// result in compilation errors.
type UnsafeSheepServer interface {
	mustEmbedUnimplementedSheepServer()
}

func RegisterSheepServer(s grpc.ServiceRegistrar, srv SheepServer) {
	s.RegisterService(&Sheep_ServiceDesc, srv)
}

func _Sheep_GetBoolFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoolFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheepServer).GetBoolFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sheep_GetBoolFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheepServer).GetBoolFlag(ctx, req.(*GetBoolFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheep_CreateFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheepServer).CreateFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sheep_CreateFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheepServer).CreateFlag(ctx, req.(*CreateFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sheep_ServiceDesc is the grpc.ServiceDesc for Sheep service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sheep_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sheep.Sheep",
	HandlerType: (*SheepServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBoolFlag",
			Handler:    _Sheep_GetBoolFlag_Handler,
		},
		{
			MethodName: "CreateFlag",
			Handler:    _Sheep_CreateFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sheep.proto",
}
